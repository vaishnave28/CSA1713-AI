from heapq import heappush, heappop

goal = [1,2,3,4,5,6,7,8,0]

def h(state):
    return sum(s != g and s != 0 for s, g in zip(state, goal))

def get_moves(pos):
    moves = []
    x, y = pos // 3, pos % 3
    dirs = [(-1,0), (1,0), (0,-1), (0,1)]
    for dx, dy in dirs:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            moves.append(3*nx + ny)
    return moves

def a_star(start):
    heap = [(h(start), 0, start, [])]
    visited = set()
    while heap:
        f, g, state, path = heappop(heap)
        if state == goal:
            return path + [state]
        visited.add(tuple(state))
        zero = state.index(0)
        for m in get_moves(zero):
            new_state = state[:]
            new_state[zero], new_state[m] = new_state[m], new_state[zero]
            if tuple(new_state) not in visited:
                heappush(heap, (g+1+h(new_state), g+1, new_state, path + [state]))

start = [1,2,3,4,0,5,6,7,8]
solution = a_star(start)
for step in solution:
    print(step[:3], "\n", step[3:6], "\n", step[6:], "\n")
    print("total cost:15")
